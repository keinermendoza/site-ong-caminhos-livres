const formErrors=[];document.addEventListener('DOMContentLoaded',()=>{const toastContainer=document.getElementById('toast-container');const toastSuccess=document.getElementById('toast-success');const toastError=document.getElementById('toast-error');const form=document.getElementById('form-cadastro');form.addEventListener('submit',(e)=>{e.preventDefault();if(formErrors.length>0){displayToast(toastError,toastContainer)}else{displayToast(toastSuccess,toastContainer)
form.reset()}})
const telefone=document.getElementById('telefone');const nome=document.getElementById('nome');const email=document.getElementById('email');const dataNascimento=document.getElementById('data_nascimento');const endereco=document.getElementById('endereco');const cpf=document.getElementById('cpf');const cep=document.getElementById('cep');const cidade=document.getElementById('cidade');const estado=document.getElementById('estado');const toValidate=[{field:telefone,validationCallback:()=>notEmpty(telefone,"telefone")},{field:nome,validationCallback:()=>notEmpty(nome,"nome")},{field:email,validationCallback:()=>notEmpty(email,"email")},{field:email,validationCallback:()=>validateEmail(email)},{field:dataNascimento,validationCallback:()=>notEmpty(dataNascimento,"Data de Nascimento")},{field:dataNascimento,validationCallback:()=>minimumAge(dataNascimento,"Data de Nascimento")},{field:endereco,validationCallback:()=>notEmpty(endereco,"Endereco")},{field:cpf,validationCallback:()=>notEmpty(cpf,"CPF")},{field:cpf,validationCallback:()=>validateCPF(cpf)},{field:cep,validationCallback:()=>notEmpty(cep,"CEP")},{field:cep,validationCallback:()=>validateAndUseCEP(cep,cidade,estado)},]
toValidate.forEach(validation=>{validation.field.addEventListener("blur",validation.validationCallback);validation.field.addEventListener("input",()=>cleanError(validation.field))})
telefone.addEventListener('input',(e)=>criaMascaraTelefone(e));cpf.addEventListener('input',(e)=>criaMascaraCPF(e));cep.addEventListener('input',(e)=>criaMascaraCEP(e))})
function setError(element,message){if(!formErrors.includes(element)){formErrors.push(element)}
const container=element.parentElement;container.classList.add("error");container.querySelector(".error-message").innerText=message}
function cleanError(element){const index=formErrors.indexOf(element);if(index!==-1){formErrors.splice(index,1)}
const container=element.parentElement;container.classList.remove("error")}
const notEmpty=(field,fieldname)=>{if(field.value.trim()===""){setError(field,`Por favor, insira um valor para o campo ${fieldname}`)}}
function validateEmail(emailfield){const email=emailfield.value.trim();const emailPattern=/^[a-zA-Z0-9._%+\-]+@[a-zA-Z0-9.\-]+\.[a-zA-Z]{2,}$/;if(!emailPattern.test(email)){setError(emailfield,"E-mail inválido. Por favor, utilize um endereço de e-mail válido.")}}
function minimumAge(datafield,fieldname){const stringDate=datafield.value.trim();const nacimiento=new Date(stringDate);const ahora=new Date();let edad=ahora.getFullYear()-nacimiento.getFullYear();const mesActual=ahora.getMonth();const mesNacimiento=nacimiento.getMonth();if(mesActual<mesNacimiento){edad--}else if(mesActual===mesNacimiento){const diaActual=ahora.getDate();const diaNacimiento=nacimiento.getDate();if(diaActual<diaNacimiento){edad--}}
if(edad<18){setError(datafield,"Não é possível cadastrar menores de idade.")}}
function validateCPF(cpfField){if(!coreValidateCPF(cpfField)){setError(cpfField,"CPF inválido. Por favor, insira um CPF válido.")}}
function coreValidateCPF(cpfField){cpf=cpfField.value.trim();cpf=cpf.replace(/[^\d]+/g,'');if(cpf.length!==11||/^(\d)\1+$/.test(cpf))return!1;let soma=0;let resto;for(let i=1;i<=9;i++){soma+=parseInt(cpf.substring(i-1,i))*(11-i)}
resto=(soma*10)%11;if(resto===10||resto===11)resto=0;if(resto!==parseInt(cpf.substring(9,10)))return!1;soma=0;for(let i=1;i<=10;i++){soma+=parseInt(cpf.substring(i-1,i))*(12-i)}
resto=(soma*10)%11;if(resto===10||resto===11)resto=0;if(resto!==parseInt(cpf.substring(10,11)))return!1;return!0}
async function validateAndUseCEP(cepField,cidade,estado){cep=cepField.value.trim();try{const cleanedCEP=cep.replace(/\D/g,'');if(!/^\d{8}$/.test(cleanedCEP)){throw new Error("invalid")}
const response=await fetch(`https://viacep.com.br/ws/${cleanedCEP}/json/`);const data=await response.json();if(data.erro){throw new Error("invalid")}
cidade.value=data.localidade;estado.value=data.estado}catch(e){setError(cepField,`Não foi possivel reconhecer o cep ${cep}. Por favor, insira um CEP válido.`)
cidade.value="";estado.value=""}}
function criaMascaraTelefone(event){let x=event.target.value;x=x.replace(/\D/g,'')
if(x.length>11)x=x.slice(0,11);x=x.replace(/^(\d{2})(\d)/g,'($1) $2');x=x.replace(/(\d{5})(\d{4})$/,'$1-$2');event.target.value=x}
function criaMascaraCPF(event){const cpf=event.target;let v=cpf.value;if(isNaN(v[v.length-1])){cpf.value=v.substring(0,v.length-1);return}
cpf.setAttribute("maxlength","14");if(v.length==3||v.length==7)cpf.value+=".";if(v.length==11)cpf.value+="-"}
function criaMascaraCEP(event){const cep=event.target;let v=cep.value;if(isNaN(v[v.length-1])){cep.value=v.substring(0,v.length-1);return}
cep.setAttribute("maxlength","9");if(v.length===5)cep.value+="-"}
function displayToast(templateElement,containerElement){if(!templateElement||!containerElement){console.error("Template ou contenedor no encontrados.");return}
const fragment=templateElement.content.cloneNode(!0);const toast=fragment.querySelector(".toast");containerElement.appendChild(fragment);if(toast){setTimeout(()=>toast.remove(),5500)}}